//Approach 1 => Sorting
class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        int n = nums.size();
        int i = 0;
        sort(nums.begin(),nums.end());
        vector<int> res;
        while(i < n-1){
            if(nums[i] == nums[i+1]) i+=2;
            else{
                res.push_back(nums[i]);
                i++;
            }
        }
        
        if(res.size() == 1){
            res.push_back(nums.back());
        }
        
        return res;
    }
};

//Approach 2 => Hashing
class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        int n = nums.size();
        
        unordered_map<int,int> mapka;
        for(int i = 0;i<n;i++){
            mapka[nums[i]]++;
        }
        
        vector<int> res;
        for(auto it:mapka){
            if(it.second == 1){
                res.push_back(it.first);
            }
        }
        
        return res;
    }
};

//Approach 3 => BitWise Manipulation Using XOR
class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        int n = nums.size();
        
        long long int xxor = 0;
        for(int i = 0;i<n;i++){
            xxor ^= nums[i];
        }
        
        // xxor = 6 = 110
        
        int rightMostSetBit = xxor & (-xxor); //010
        int a = 0 , b= 0;
        for(int i = 0;i<n;i++){
            if(nums[i] & rightMostSetBit){
                a ^= nums[i];
            }
            else{
                b ^= nums[i];
            }
        }
        
        return {a,b};
    }
};